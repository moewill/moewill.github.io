name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  backend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      working-directory: backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      working-directory: backend
      run: pytest app/tests/ -v --tb=short
    
    - name: Test Docker build
      working-directory: backend
      run: docker build -t test-backend .

  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      working-directory: frontend
      run: npm ci
    
    - name: Run frontend tests
      working-directory: frontend
      run: npm test
    
    - name: Build frontend
      working-directory: frontend
      run: npm run build
    
    - name: Test Docker build
      working-directory: frontend
      run: docker build -t test-frontend .

  integration-tests:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install test dependencies
      run: |
        pip install pytest requests pyyaml
    
    - name: Start services
      run: |
        docker-compose up -d --build
        sleep 30
    
    - name: Run integration tests
      run: pytest tests/integration/ -v --tb=short
    
    - name: Run CSS tests
      run: pytest tests/css/ -v --tb=short
    
    - name: Stop services
      run: docker-compose down

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, integration-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build and tag images
      run: |
        docker build -t mauricewilliams/backend:${{ github.sha }} backend/
        docker build -t mauricewilliams/frontend:${{ github.sha }} frontend/
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push images
      run: |
        docker push mauricewilliams/backend:${{ github.sha }}
        docker push mauricewilliams/frontend:${{ github.sha }}
        docker tag mauricewilliams/backend:${{ github.sha }} mauricewilliams/backend:latest
        docker tag mauricewilliams/frontend:${{ github.sha }} mauricewilliams/frontend:latest
        docker push mauricewilliams/backend:latest
        docker push mauricewilliams/frontend:latest